{"ast":null,"code":"var _jsxFileName = \"/home/faith/code-challenges/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport BotCollection from \"./components/BotCollection\";\nimport YourBotArmy from \"./components/YourBotArmy\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [bots, setBots] = useState([]); // Fetch and store bot data\n  const [army, setArmy] = useState([]); // Store enlisted bots\n\n  // Implement functions to fetch data, enlist and release bots\n  useEffect(() => {\n    // Fetch the bot data here and update the 'bots' state\n    // You can use the fetch API, axios, or any other method to fetch data\n    // Example:\n    fetch(\"http://localhost:8001/bots\").then(response => response.json()).then(data => setBots(data)).catch(error => console.error(\"Error fetching bot data: \", error));\n  }, []);\n\n  // Function to enlist a bot\n  const enlistBot = bot => {\n    console.log(\"Enlisting bot:\", bot);\n    // Check if the bot is not already enlisted\n    if (!army.includes(bot)) {\n      setArmy([...army, bot]);\n    }\n  };\n\n  // Function to release a bot\n  const releaseBot = bot => {\n    console.log(\"Releasing bot:\", bot);\n    const updatedArmy = army.filter(enlistedBot => enlistedBot !== bot);\n    setArmy(updatedArmy);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bot Battlr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this), bots.map(bot => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: bot.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => enlistBot(bot),\n        children: \"Enlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => releaseBot(bot),\n        children: \"Release\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, bot.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Bot Army\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), enlistedBots.map(enlistedBot => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: enlistedBot.name\n    }, enlistedBot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"68vvBV/GRPK97Mw+lesffEpDxCY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotCollection","YourBotArmy","jsxDEV","_jsxDEV","App","_s","bots","setBots","army","setArmy","fetch","then","response","json","data","catch","error","console","enlistBot","bot","log","includes","releaseBot","updatedArmy","filter","enlistedBot","children","fileName","_jsxFileName","lineNumber","columnNumber","map","name","onClick","id","enlistedBots","_c","$RefreshReg$"],"sources":["/home/faith/code-challenges/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport BotCollection from \"./components/BotCollection\";\nimport YourBotArmy from \"./components/YourBotArmy\";\nimport \"./App.css\";\n\nfunction App() {\n  const [bots, setBots] = useState([]); // Fetch and store bot data\n  const [army, setArmy] = useState([]); // Store enlisted bots\n\n  // Implement functions to fetch data, enlist and release bots\n  useEffect(() => {\n    // Fetch the bot data here and update the 'bots' state\n    // You can use the fetch API, axios, or any other method to fetch data\n    // Example:\n    fetch(\"http://localhost:8001/bots\")\n      .then((response) => response.json())\n      .then((data) => setBots(data))\n      .catch((error) => console.error(\"Error fetching bot data: \", error));\n  }, []);\n\n// Function to enlist a bot\nconst enlistBot = (bot) => {\n  console.log(\"Enlisting bot:\", bot);\n  // Check if the bot is not already enlisted\n  if (!army.includes(bot)) {\n    setArmy([...army, bot]);\n  }\n};\n\n// Function to release a bot\nconst releaseBot = (bot) => {\n  console.log(\"Releasing bot:\", bot);\n  const updatedArmy = army.filter((enlistedBot) => enlistedBot !== bot);\n  setArmy(updatedArmy);\n};\n\nreturn (\n  <div>\n    <h1>Bot Battlr</h1>\n    {bots.map((bot) => (\n      <div key={bot.id}>\n        <p>{bot.name}</p>\n        <button onClick={() => enlistBot(bot)}>Enlist</button>\n        <button onClick={() => releaseBot(bot)}>Release</button>\n      </div>\n    ))}\n    <h2>Your Bot Army</h2>\n    {enlistedBots.map((enlistedBot) => (\n      <p key={enlistedBot.id}>{enlistedBot.name}</p>\n    ))}\n  </div>\n);\n}\n\n \n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}