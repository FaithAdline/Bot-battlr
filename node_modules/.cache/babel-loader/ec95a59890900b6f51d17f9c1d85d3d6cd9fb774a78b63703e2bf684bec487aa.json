{"ast":null,"code":"var _jsxFileName = \"/home/faith/code-challenges/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [bots, setBots] = useState([/* your list of bots */]);\n  const [enlistedBots, setEnlistedBots] = useState([]); // Define enlistedBots state\n\n  const enlistBot = bot => {\n    if (!enlistedBots.includes(bot)) {\n      setEnlistedBots([...enlistedBots, bot]);\n    }\n  };\n  const releaseBot = bot => {\n    setEnlistedBots(enlistedBots.filter(enlistedBot => enlistedBot !== bot));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bot Battlr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), bots.map(bot => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: bot.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => enlistBot(bot),\n        children: \"Enlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => releaseBot(bot),\n        children: \"Release\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this)]\n    }, bot.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Bot Army\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), enlistedBots.map(enlistedBot => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: enlistedBot.name\n    }, enlistedBot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"w8zDGBEd99mpd0TKwjhQgAUhrLc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","bots","setBots","enlistedBots","setEnlistedBots","enlistBot","bot","includes","releaseBot","filter","enlistedBot","children","fileName","_jsxFileName","lineNumber","columnNumber","map","name","onClick","id","_c","$RefreshReg$"],"sources":["/home/faith/code-challenges/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const [bots, setBots] = useState([/* your list of bots */]);\n  const [enlistedBots, setEnlistedBots] = useState([]); // Define enlistedBots state\n\n  const enlistBot = (bot) => {\n    if (!enlistedBots.includes(bot)) {\n      setEnlistedBots([...enlistedBots, bot]);\n    }\n  };\n\n  const releaseBot = (bot) => {\n    setEnlistedBots(enlistedBots.filter((enlistedBot) => enlistedBot !== bot));\n  };\n\n  return (\n    <div>\n      <h1>Bot Battlr</h1>\n      {bots.map((bot) => (\n        <div key={bot.id}>\n          <p>{bot.name}</p>\n          <button onClick={() => enlistBot(bot)}>Enlist</button>\n          <button onClick={() => releaseBot(bot)}>Release</button>\n        </div>\n      ))}\n      <h2>Your Bot Army</h2>\n      {enlistedBots.map((enlistedBot) => (\n        <p key={enlistedBot.id}>{enlistedBot.name}</p>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,CAAC,wBAAwB,CAAC;EAC3D,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtD,MAAMS,SAAS,GAAIC,GAAG,IAAK;IACzB,IAAI,CAACH,YAAY,CAACI,QAAQ,CAACD,GAAG,CAAC,EAAE;MAC/BF,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAEG,GAAG,CAAC,CAAC;IACzC;EACF,CAAC;EAED,MAAME,UAAU,GAAIF,GAAG,IAAK;IAC1BF,eAAe,CAACD,YAAY,CAACM,MAAM,CAAEC,WAAW,IAAKA,WAAW,KAAKJ,GAAG,CAAC,CAAC;EAC5E,CAAC;EAED,oBACER,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAClBd,IAAI,CAACe,GAAG,CAAEV,GAAG,iBACZR,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAAa,QAAA,EAAIL,GAAG,CAACW;MAAI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjBjB,OAAA;QAAQoB,OAAO,EAAEA,CAAA,KAAMb,SAAS,CAACC,GAAG,CAAE;QAAAK,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACtDjB,OAAA;QAAQoB,OAAO,EAAEA,CAAA,KAAMV,UAAU,CAACF,GAAG,CAAE;QAAAK,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,GAHhDT,GAAG,CAACa,EAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIX,CACN,CAAC,eACFjB,OAAA;MAAAa,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBZ,YAAY,CAACa,GAAG,CAAEN,WAAW,iBAC5BZ,OAAA;MAAAa,QAAA,EAAyBD,WAAW,CAACO;IAAI,GAAjCP,WAAW,CAACS,EAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuB,CAC9C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACf,EAAA,CA9BQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAgCZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}